# TODO - DO NOT COMMIT WITH THESE babies OVER HERE!!
#   '5805143533:AAGt7j1805SQlQrd5g9jiuXEjOk7NHy7DLc'
#   >>> import requests
#   >>> chat_id = 849123501
#   >>> message = 'Yo'
#   >>> url =
#   >>> 'https://api.telegram.org/bot{}/sendMessage?chat_id={}&text={}'.format(token,
#                                                                           >>> chat_id,
#                                                                           >>> message)
#   >>> print(requests.get(url).json())
#   {'ok': True, 'result': {'message_id': 9, 'from': {'id': 5805143533, 'is_bot': True, 'first_name': 'TeleVision', 'username': 'DigitalUndergroundBot'}, 'chat': {'id': 849123501, 'first_name': 'LyrionJax', 'username': 'LyrionJax', 'type': 'private'}, 'date': 1674364048, 'text': 'Yo'}

    # TODO - DEPRECATED?
#   def create_update_dispatcher(self, updater):
#       log.debug('TODO - FIX ME')
#       obj = updater.dispatcher
#       return obj

#       dispatcher.add_handler(MessageHandler(filters.Text, BOT_CTRL_INDEX['echo']))

    # BOT CTRLS

    # TODO
#   async def start(self, update, context):
#       '''
#       [ NOTE ]: Function that will be called when the /start command is received
#       '''
#       log.debug('TODO - FIX ME')
#       update.message.reply_text('Welcome to TeleVision!')
#   async def help(self, update, context):
#       '''
#       [ NOTE ]: Function that will be called when the /help command is received
#       '''
#       log.debug('TODO - FIX ME')
#       update.message.reply_text(
#           "Smile! You're on TeleVision!"
#       )
#   async def error(self, update, context):
#       '''
#       [ NOTE ]: Log Errors caused by Updates.
#       '''
#       log.warning(
#           'Update ({}) caused error ({})'.format(update, context.error)
#       )


#       dispatcher.add_handler(CommandHandler("start", start))
#       dispatcher.add_handler(CommandHandler("help", help))


#   async def phone_home(self, update, context):
#       '''
#       [ NOTE ]: Function that will be called when a message is received
#       '''
#       log.debug('TODO - Under construction')
#       update.message.reply_text(update.message.text)


#   import requests
#   TOKEN = "YOUR TELEGRAM BOT TOKEN"
#   url = f"https://api.telegram.org/bot{TOKEN}/getUpdates"
#   print(requests.get(url).json())

#   import requests
#   TOKEN = "YOUR TELEGRAM BOT TOKEN"
#   chat_id = "YOUR CHAT ID"
#   message = "hello from your telegram bot"
#   url = f"https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={chat_id}&text={message}"
#   print(requests.get(url).json()) # this sends the message

#   >>> app = Application.builder().token('5805143533:AAGt7j1805SQlQrd5g9jiuXEjOk7NHy7DLc').build()
#   >>> def phone_home(update, context):
#       ...     update.message.reply_text(update.message.text)
#       ...
#   >>> app.add_handler(CommandHandler('yo', phone_home))
#   >>> app.run_polling(0.0)


#   from telegram.ext import *
#   import keys

#   print('Starting a bot....')

#   async def start_commmand(update, context):
#       await update.message.reply_text('Hello! Welcome To Store!')

#   if __name__ == '__main__':
#   application = Application.builder().token(keys.token).build()

#   # Commands
#   application.add_handler(CommandHandler('start', start_commmand))

#   # Run bot
#   application.run_polling(1.0)


#   import logging

#   from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

#   # Enable logging
#   logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#                                           level=logging.INFO)

#   logger = logging.getLogger(__name__)


#   # Define a function that will be called when the /start command is received
#   def start(update, context):
#       update.message.reply_text('Hi there!')


#   # Define a function that will be called when a message is received
#   def echo(update, context):
#       update.message.reply_text(update.message.text)


#   # Define a function that will be called when the /help command
#   # is received
#   def help(update, context):
#       update.message.reply_text('I am a simple echo bot. Send me a message and I will send it back to you.')


#   def error(update, context):
#       """Log Errors caused by Updates."""
#       logger.warning('Update "%s" caused error "%s"', update, context.error)


#   # Create the Updater and pass it the bot's
#   # token
#   updater = Updater("YOUR_BOT_TOKEN", use_context=True)

#   # Get the dispatcher to register handlers
#   dp = updater.dispatcher

#   # Add the handlers to the dispatcher
#   dp.add_handler(CommandHandler("start", start))
#   dp.add_handler(CommandHandler("help", help))
#   dp.add_handler(MessageHandler(Filters.text, echo))

#   # Add an error handler
#   dp.add_error_handler(error)

#   # Start the bot
#   updater.start_polling()

#   # Run the bot until you press Ctrl-C or the
#   # process receives SIGINT,
#   # SIGTERM or SIGABRT. This should be used
#   # most of the time, since
#   # start_polling() is non-blocking and will
#   # stop the bot gracefully.
#   updater.idle()

